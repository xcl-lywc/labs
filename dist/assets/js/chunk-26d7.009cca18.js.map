{"version":3,"sources":["webpack:///./src/views/settings/ArticleSetting.vue?f724","webpack:///src/views/settings/ArticleSetting.vue","webpack:///./src/views/settings/ArticleSetting.vue?f2a1","webpack:///./src/views/settings/ArticleSetting.vue","webpack:///./node_modules/wangeditor/release/wangEditor.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","separator-class","_v","directives","name","rawName","value","expression","common","checkAuthority","span","type","size","disabled","on","click","$event","addTree","data","treeData","props","defaultProps","node-key","default-expand-all","expand-on-click-node","draggable","allow-drop","allowDrop","node-click","handleNodeClick","node-drag-end","handleDragEnd","scopedSlots","_u","key","fn","ref","node","mouseenter","tempId","id","mouseleave","class","text-primary","activeId","_s","label","parent_id","stopPropagation","title","_e","editTree","childrens","length","deleteTree","activeNode","tableData","rows","show-header","prop","width","fixed","scope","getArticleDetail","row","deleteArticle","showEditDialog","background","layout","current-page","pageNum","page-size","pageSize","total","size-change","pageSizeChange","current-change","pageCurrentChange","visible","dialogTypeVisible","update:visible","model","typeForm","rules","typeFormRules","label-width","callback","$$v","$set","slot","loading","pageLoading","addTreeSubmit","dialogArticleEditVisible","editorForm","submitArticle","dialogArticleDetailVisible","article_name","domProps","innerHTML","article_content","changeToEdit","staticRenderFns","ArticleSettingvue_type_script_lang_js_","activeCode","children","required","message","trigger","insertMode","operateType","notSecond","mounted","initArticleTree","watch","handler","newV","oldV","console","log","deep","methods","_this","config","method","url","concat","basePath","axios","then","response","getArticleList","code","catch","errorMsg","$message","error","_this2","array_number","$nextTick","_","$refs","clearValidate","_this3","JSON","parse","stringify","_this4","validate","valid","success","meta","_this5","$confirm","confirmButtonText","cancelButtonText","_this6","params","editBoolean","_this7","initEditor","editor","wangEditor_default","a","customConfig","debug","uploadImgServer","showLinkImg","uploadImgHeaders","returnConfig","create","txt","html","_this8","types","author","sessionStorage","getItem","_this9","newForm","_this10","val","draggingNode","dropNode","dropType","ev","_this11","settings_ArticleSettingvue_type_script_lang_js_","component","Object","componentNormalizer","options","__file","__webpack_exports__","global","factory","module","exports","polyfill","assign","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","prototype","hasOwnProperty","call","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","document","ownerDocument","querySelectorAll","i","item","createElemByHTML","div","createElement","isDOMList","selector","HTMLCollection","NodeList","result","eventList","DomElement","nodeType","selectorResult","Array","replace","trim","indexOf","$","constructor","forEach","elem","clone","cloneList","push","cloneNode","get","first","last","split","addEventListener","e","off","removeEventListener","attr","getAttribute","setAttribute","addClass","className","arr","filter","join","removeClass","css","currentStyle","style","styleArr","resultArr","map","show","hide","childNodes","append","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","nodeName","find","text","focus","parentUntil","_currentElem","results","equal","$elem","insertBefore","$referenceNode","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","menus","fontNames","colors","emotions","content","alt","src","zIndex","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","linkImgCallback","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","fail","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","reg","test","isIE","window","objForEach","obj","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","_active","onClick","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","replaceLang","str","langArgs","_emptyFn","DropList","menu","opt","$container","$title","titleHtml","list","$list","elemHtml","$li","hideTimeoutId","setTimeout","_rendered","_show","Head","droplist","_command","FontSize","FontName","fontName","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","$body","$textContainerElem","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","events","event","needToHide","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","$selectionELem","selectionText","checkResult","alert","$parent","$targetELem","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$tbody","$trs","trLength","tr","locationData","trData","$currentTr","tdData","newTr","tdIndex","$trParent","$currentTd","toLowerCase","newTd","$table","textValId","width30","width50","width100","delBtn","tabsConfig","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","$file","fileElem","fileList","$linkUrl","insertLinkImg","tabsConfigResult","customUploadImg","FileReader","MenuConstructors","Menus","getPasteText","clipboardData","originalEvent","pasteText","getData","getPasteHtml","filterStyle","ignoreImg","pasteHtml","docSplitHtml","getPasteImgs","items","getAsFile","getChildrenJSON","curElem","elemResult","textContent","tag","attrData","attrList","attributes","attrListLength","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$bar","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","emoticon","table","video","image","init","configMenus","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","pHandle","codeHandle","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","keyCode","txtHtml","pasteTime","canDo","now","Date","flag","resetTime","ex","pasteFiles","img","$document","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","UploadImg","_alert","alertInfo","debugInfo","customAlert","Error","onload","onerror","onabort","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","onreadystatechange","readyState","status","responseText","customInsert","errno","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","editorId","Editor","toolbarSelector","textSelector","_initConfig","langConfig","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","_offAllEvent","inlinecss","getElementsByTagName","wangEditor"],"mappings":"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","file":"assets/js/chunk-26d7.009cca18.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content-wrap-box\"},[_c('el-card',{staticClass:\"title-card\"},[_c('el-breadcrumb',{attrs:{\"separator-class\":\"el-icon-arrow-right\"}},[_c('el-breadcrumb-item',[_vm._v(\"文章设置\")])],1)],1),_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.pageLoading),expression:\"pageLoading\"}],staticClass:\"router-view-wrap\"},[_c('div',{staticClass:\"router-view-content\"},[(_vm.common.checkAuthority('ArticleSetting-tree', true))?_c('el-row',{staticClass:\"padding-row\"},[_c('el-col',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.pageLoading),expression:\"pageLoading\"}],attrs:{\"span\":7}},[_c('div',[_c('el-button',{staticClass:\"fill-width\",attrs:{\"type\":\"primary\",\"size\":\"mini\",\"disabled\":!_vm.common.checkAuthority('ArticleSetting-add', true)},on:{\"click\":function($event){_vm.addTree(null)}}},[_vm._v(\"添加顶级\")])],1),(_vm.treeData)?_c('el-tree',{attrs:{\"data\":_vm.treeData,\"props\":_vm.defaultProps,\"node-key\":\"id\",\"default-expand-all\":\"\",\"expand-on-click-node\":false,\"draggable\":\"\",\"allow-drop\":_vm.allowDrop},on:{\"node-click\":_vm.handleNodeClick,\"node-drag-end\":_vm.handleDragEnd},scopedSlots:_vm._u([{key:\"default\",fn:function(ref){\nvar node = ref.node;\nvar data = ref.data;\nreturn _c('span',{staticClass:\"fill-width\"},[_c('div',{on:{\"mouseenter\":function($event){_vm.tempId = data.id},\"mouseleave\":function($event){_vm.tempId = null}}},[_c('span',{class:{'text-primary' : _vm.activeId == data.id }},[_vm._v(\"\\n                  \"+_vm._s(node.label)+\"\\n                  \"),(_vm.tempId == data.id)?_c('span',[(!data.parent_id && _vm.common.checkAuthority('ArticleSetting-add', true))?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){$event.stopPropagation();_vm.addTree(data)}}},[_c('i',{staticClass:\"fa fa-plus text-primary\",attrs:{\"title\":\"添加次级\"}})]):_vm._e(),(_vm.common.checkAuthority('ArticleSetting-add', true))?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){$event.stopPropagation();_vm.addTree(data, 'prev')}}},[_c('i',{staticClass:\"fa fa-arrow-up text-primary\",attrs:{\"title\":\"添加至前方\"}})]):_vm._e(),(_vm.common.checkAuthority('ArticleSetting-add', true))?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){$event.stopPropagation();_vm.addTree(data, 'next')}}},[_c('i',{staticClass:\"fa fa-arrow-down text-primary\",attrs:{\"title\":\"添加至后方\"}})]):_vm._e(),(_vm.common.checkAuthority('ArticleSetting-edit', true))?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){$event.stopPropagation();_vm.editTree(data)}}},[_c('i',{staticClass:\"fa fa-pencil-square-o text-primary\",attrs:{\"title\":\"编辑\"}})]):_vm._e(),(!(data.childrens && data.childrens.length > 0) && _vm.common.checkAuthority('ArticleSetting-delete', true))?_c('el-button',{attrs:{\"type\":\"text\"},on:{\"click\":function($event){$event.stopPropagation();_vm.deleteTree(data)}}},[_c('i',{staticClass:\"fa fa-trash-o text-danger\",attrs:{\"title\":\"删除\"}})]):_vm._e()],1):_vm._e()])])])}}])}):_vm._e()],1),(_vm.common.checkAuthority('ArticleSetting-listArticle', true))?_c('el-col',{attrs:{\"span\":17}},[(_vm.activeNode.parent_id)?_c('div',[_c('el-table',{attrs:{\"data\":_vm.tableData.rows,\"show-header\":true}},[_c('el-table-column',{attrs:{\"prop\":\"article_name\",\"label\":\"文章标题\"}}),_c('el-table-column',{attrs:{\"prop\":\"authorName\",\"label\":\"作者\",\"width\":\"180\"}}),_c('el-table-column',{attrs:{\"label\":\"操作\",\"width\":\"180\",\"fixed\":\"right\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('el-button',{attrs:{\"type\":\"default\",\"size\":\"mini\",\"disabled\":!_vm.common.checkAuthority('ArticleSetting-detailArticle', true)},on:{\"click\":function($event){_vm.getArticleDetail(scope.row, 'detail')}}},[_vm._v(\"详 情\")]),_c('el-button',{attrs:{\"type\":\"danger\",\"size\":\"mini\",\"disabled\":!_vm.common.checkAuthority('ArticleSetting-deleteArticle', true)},on:{\"click\":function($event){_vm.deleteArticle(scope.row)}}},[_vm._v(\"删 除\")])]}}])})],1)],1):_c('div',{staticClass:\"text-center text-info\"},[_vm._v(\" 管理文章请选择次级分类 \")])]):_c('el-col',{staticClass:\"text-center text-info\",attrs:{\"span\":17}},[_vm._v(\" 你无权查看此内容 \")])],1):_c('div',{staticClass:\"text-center text-info\"},[_vm._v(\" 你无权查看此内容 \")])],1),(_vm.common.checkAuthority('ArticleSetting-listArticle', true))?_c('div',{staticClass:\"router-view-bottom\"},[_c('div',[_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"mini\",\"disabled\":!_vm.common.checkAuthority('ArticleSetting-addArticle', true) || !this.activeNode.parent_id},on:{\"click\":function($event){_vm.showEditDialog(false)}}},[_vm._v(\"新增文章\")])],1),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"total, sizes, prev, pager, next\",\"current-page\":_vm.pageNum,\"page-size\":_vm.pageSize,\"total\":_vm.tableData.total},on:{\"size-change\":_vm.pageSizeChange,\"current-change\":_vm.pageCurrentChange}})],1):_c('div',{staticClass:\"router-view-bottom\"},[_c('div')])]),_c('el-dialog',{attrs:{\"title\":\"文章分类\",\"visible\":_vm.dialogTypeVisible,\"width\":\"30vw\"},on:{\"update:visible\":function($event){_vm.dialogTypeVisible=$event}}},[_c('el-form',{ref:\"typeForm\",attrs:{\"model\":_vm.typeForm,\"rules\":_vm.typeFormRules,\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"名称：\",\"prop\":\"name\"}},[_c('el-input',{model:{value:(_vm.typeForm.name),callback:function ($$v) {_vm.$set(_vm.typeForm, \"name\", $$v)},expression:\"typeForm.name\"}})],1),_c('el-form-item',{attrs:{\"label\":\"类型：\",\"prop\":\"type\"}},[_c('el-select',{staticClass:\"fill-width\",model:{value:(_vm.typeForm.type),callback:function ($$v) {_vm.$set(_vm.typeForm, \"type\", $$v)},expression:\"typeForm.type\"}},[_c('el-option',{attrs:{\"value\":1,\"label\":\"文章列表\"}}),_c('el-option',{attrs:{\"value\":2,\"label\":\"单个文章\"}})],1)],1)],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogTypeVisible = false}}},[_vm._v(\"取 消\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.pageLoading},on:{\"click\":_vm.addTreeSubmit}},[_vm._v(\"确 定\")])],1)],1),_c('el-dialog',{attrs:{\"title\":((_vm.activeNode.name) + \" - 文章\"),\"visible\":_vm.dialogArticleEditVisible,\"width\":\"80vw\"},on:{\"update:visible\":function($event){_vm.dialogArticleEditVisible=$event}}},[_c('el-form',{attrs:{\"model\":_vm.editorForm,\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"标题：\"}},[_c('el-input',{model:{value:(_vm.editorForm.article_name),callback:function ($$v) {_vm.$set(_vm.editorForm, \"article_name\", $$v)},expression:\"editorForm.article_name\"}})],1),_c('el-form-item',{attrs:{\"label\":\"内容：\"}},[_c('div',{ref:\"editor\"})])],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogArticleEditVisible = false}}},[_vm._v(\"取 消\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.pageLoading},on:{\"click\":_vm.submitArticle}},[_vm._v(\"确 定\")])],1)],1),_c('el-dialog',{attrs:{\"title\":\"文章详情\",\"visible\":_vm.dialogArticleDetailVisible,\"width\":\"80vw\"},on:{\"update:visible\":function($event){_vm.dialogArticleDetailVisible=$event}}},[_c('el-form',{attrs:{\"model\":_vm.editorForm,\"label-width\":\"100px\"}},[_c('el-form-item',{attrs:{\"label\":\"标题：\"}},[_c('div',[_vm._v(_vm._s(_vm.editorForm.article_name))])]),_c('el-form-item',{attrs:{\"label\":\"内容：\"}},[_c('div',{domProps:{\"innerHTML\":_vm._s(_vm.editorForm.article_content)}})])],1),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{attrs:{\"loading\":_vm.pageLoading},on:{\"click\":function($event){_vm.dialogArticleDetailVisible = false}}},[_vm._v(\"确 定\")]),_c('el-button',{attrs:{\"type\":\"primary\",\"disabled\":!_vm.common.checkAuthority('ArticleSetting-editArticle', true)},on:{\"click\":_vm.changeToEdit}},[_vm._v(\"编 辑\")])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"content-wrap-box\">\r\n    <el-card class=\"title-card\">\r\n      <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n        <el-breadcrumb-item>文章设置</el-breadcrumb-item> \r\n      </el-breadcrumb>\r\n    </el-card>\r\n    <div class=\"router-view-wrap\" v-loading=\"pageLoading\">\r\n      <!-- 页面主要内容 -->\r\n      <div class=\"router-view-content\">\r\n        <el-row class=\"padding-row\" v-if=\"common.checkAuthority('ArticleSetting-tree', true)\">\r\n          <el-col :span=\"7\" v-loading=\"pageLoading\">\r\n            <div><el-button type=\"primary\" class=\"fill-width\" size=\"mini\" :disabled=\"!common.checkAuthority('ArticleSetting-add', true)\" @click=\"addTree(null)\">添加顶级</el-button></div>\r\n            <el-tree\r\n              v-if=\"treeData\"\r\n              :data=\"treeData\"\r\n              :props=\"defaultProps\"\r\n              node-key=\"id\"\r\n              @node-click=\"handleNodeClick\"\r\n              default-expand-all\r\n              :expand-on-click-node=\"false\"\r\n              draggable\r\n              @node-drag-end=\"handleDragEnd\"\r\n              :allow-drop=\"allowDrop\"\r\n              >\r\n              <span class=\"fill-width\" slot-scope=\"{ node, data }\">\r\n                <div @mouseenter=\"tempId = data.id\" @mouseleave=\"tempId = null\">\r\n                  <span :class=\"{'text-primary' : activeId == data.id }\" >\r\n                    <!-- <i class=\"el-icon-circle-check\" v-if=\"activeId == data.id\"></i> -->\r\n                    {{ node.label }}\r\n                    <span v-if=\"tempId == data.id\">\r\n                      <el-button type=\"text\" v-if=\"!data.parent_id && common.checkAuthority('ArticleSetting-add', true)\"  @click.stop=\"addTree(data)\"><i class=\"fa fa-plus text-primary\" title=\"添加次级\"></i></el-button>\r\n                      \r\n                      <el-button v-if=\"common.checkAuthority('ArticleSetting-add', true)\" type=\"text\" @click.stop=\"addTree(data, 'prev')\"><i class=\"fa fa-arrow-up text-primary\" title=\"添加至前方\"></i></el-button>\r\n                      \r\n                      <el-button v-if=\"common.checkAuthority('ArticleSetting-add', true)\" type=\"text\" @click.stop=\"addTree(data, 'next')\"><i class=\"fa fa-arrow-down text-primary\" title=\"添加至后方\"></i></el-button>                      \r\n                      \r\n                      <el-button type=\"text\" v-if=\"common.checkAuthority('ArticleSetting-edit', true)\" @click.stop=\"editTree(data)\"><i class=\"fa fa-pencil-square-o text-primary\" title=\"编辑\"></i></el-button>\r\n                      \r\n                      <el-button type=\"text\" v-if=\"!(data.childrens && data.childrens.length > 0) && common.checkAuthority('ArticleSetting-delete', true)\" @click.stop=\"deleteTree(data)\"><i class=\"fa fa-trash-o text-danger\" title=\"删除\"></i></el-button>\r\n                    </span>\r\n                  </span>\r\n                </div>\r\n               </span>\r\n            </el-tree>\r\n          </el-col>\r\n          <el-col v-if=\"common.checkAuthority('ArticleSetting-listArticle', true)\" :span=\"17\">\r\n            <div v-if=\"activeNode.parent_id\">\r\n              <el-table\r\n                :data=\"tableData.rows\"\r\n                :show-header=\"true\">\r\n                <el-table-column\r\n                  prop=\"article_name\"\r\n                  label=\"文章标题\">\r\n                </el-table-column>\r\n                <el-table-column\r\n                  prop=\"authorName\"\r\n                  label=\"作者\"\r\n                  width=\"180\">\r\n                </el-table-column>\r\n                <el-table-column\r\n                  label=\"操作\"\r\n                  width=\"180\"\r\n                  fixed=\"right\">\r\n                  <template slot-scope=\"scope\">\r\n                    <el-button type=\"default\" size=\"mini\" :disabled=\"!common.checkAuthority('ArticleSetting-detailArticle', true)\" @click=\"getArticleDetail(scope.row, 'detail')\">详 情</el-button>\r\n                    <el-button type=\"danger\" size=\"mini\" :disabled=\"!common.checkAuthority('ArticleSetting-deleteArticle', true)\" @click=\"deleteArticle(scope.row)\">删 除</el-button>\r\n                    <!-- <el-button type=\"primary\" size=\"mini\" @click=\"getArticleDetail(scope.row, 'edit')\">编 辑</el-button> -->\r\n                  </template>\r\n                </el-table-column>\r\n              </el-table>\r\n            </div>\r\n            <div v-else class=\"text-center text-info\"> 管理文章请选择次级分类 </div>\r\n          </el-col>\r\n          <el-col v-else :span=\"17\" class=\"text-center text-info\"> 你无权查看此内容 </el-col>\r\n        </el-row>\r\n        <div v-else class=\"text-center text-info\"> 你无权查看此内容 </div>\r\n      </div>\r\n      <!-- 页面底部 -->\r\n      <div class=\"router-view-bottom\" v-if=\"common.checkAuthority('ArticleSetting-listArticle', true)\">\r\n        <!-- 操作按钮组 -->\r\n        <div>\r\n          <el-button type=\"primary\" size=\"mini\" :disabled=\"!common.checkAuthority('ArticleSetting-addArticle', true) || !this.activeNode.parent_id\" @click=\"showEditDialog(false)\">新增文章</el-button>\r\n        </div>\r\n        <!-- 分页 -->\r\n        <el-pagination\r\n          background\r\n          layout=\"total, sizes, prev, pager, next\"\r\n          :current-page=\"pageNum\"\r\n          :page-size=\"pageSize\"\r\n          :total=\"tableData.total\"\r\n          @size-change=\"pageSizeChange\"\r\n          @current-change=\"pageCurrentChange\">\r\n        </el-pagination>\r\n      </div>\r\n      <div v-else class=\"router-view-bottom\"><div></div></div>\r\n    </div>\r\n\r\n    <el-dialog title=\"文章分类\" :visible.sync=\"dialogTypeVisible\" width=\"30vw\">\r\n      <el-form ref=\"typeForm\" :model=\"typeForm\" :rules=\"typeFormRules\" label-width=\"100px\">\r\n        <el-form-item label=\"名称：\" prop=\"name\"><el-input v-model=\"typeForm.name\"></el-input></el-form-item>\r\n        <el-form-item label=\"类型：\" prop=\"type\">\r\n          <el-select v-model=\"typeForm.type\" class=\"fill-width\">\r\n            <el-option :value=\"1\" label=\"文章列表\"></el-option>\r\n            <el-option :value=\"2\" label=\"单个文章\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogTypeVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addTreeSubmit\" :loading=\"pageLoading\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog :title=\"`${activeNode.name} - 文章`\" :visible.sync=\"dialogArticleEditVisible\" width=\"80vw\">\r\n      <el-form :model=\"editorForm\" label-width=\"100px\">\r\n        <el-form-item label=\"标题：\"><el-input v-model=\"editorForm.article_name\"></el-input></el-form-item>\r\n        <el-form-item label=\"内容：\"><div ref=\"editor\"></div></el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogArticleEditVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitArticle\" :loading=\"pageLoading\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    \r\n    <el-dialog title=\"文章详情\" :visible.sync=\"dialogArticleDetailVisible\" width=\"80vw\">\r\n      <el-form :model=\"editorForm\" label-width=\"100px\">\r\n        <el-form-item label=\"标题：\"><div>{{editorForm.article_name}}</div></el-form-item>\r\n        <el-form-item label=\"内容：\"><div v-html=\"editorForm.article_content\"></div></el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogArticleDetailVisible = false\" :loading=\"pageLoading\">确 定</el-button>\r\n        <el-button type=\"primary\" :disabled=\"!common.checkAuthority('ArticleSetting-editArticle', true)\" @click=\"changeToEdit\">编 辑</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\n  import E from \"wangeditor\"\r\n  export default {\r\n    data() {\r\n      return {\r\n        pageLoading: false,\r\n        treeData:    [],\r\n        activeId:  null, // 当前选中的节点id\r\n        activeCode:  null, // 当前选中的节点code\r\n        tempId:    null, //鼠标浮动对应的节点id\r\n        defaultProps: {\r\n          children: 'childrens',\r\n          label: 'name'\r\n        },\r\n\r\n        tableData: {\r\n          rows: [],\r\n          total: 0\r\n        },\r\n        pageSize: 10,\r\n        pageNum: 1,\r\n\r\n\r\n        dialogTypeVisible: false,\r\n        typeForm: {\r\n          name: null,\r\n          type: 1, //1为文章列表 2为单独文章\r\n        },\r\n        typeFormRules: {\r\n          name: [{required: true, message: \"请输入名称\", trigger: \"blur\"}],\r\n          type: [{required: true, message: \"请选择类型\", trigger: \"change\"}],\r\n        },\r\n        insertMode: false, // 添加模式 添加至前后\r\n\r\n        dialogArticleEditVisible: false,\r\n        editorForm: {  //文章表单 编辑&详情都以此为基础, 编辑时深拷贝此对象\r\n          article_name:    \"\",\r\n          article_content: \"\"\r\n        },\r\n        operateType: \"new\", //操作模式 new 新增 edit 编辑\r\n        dialogArticleDetailVisible: false,\r\n\r\n        activeNode: {},\r\n        notSecond: true, // true 表示当前节点非二级节点 禁用添加功能\r\n      };\r\n    },\r\n    mounted () {\r\n      if(this.common.checkAuthority('ArticleSetting-tree', true)){\r\n        this.initArticleTree()\r\n      }\r\n    },\r\n    watch: {\r\n      activeNode: {\r\n        handler (newV,oldV) {\r\n          console.log(newV)\r\n          if(newV && !!newV.parent_id) {\r\n            this.notSecond = false\r\n          } else {\r\n            this.notSecond = true\r\n          }\r\n        },\r\n        deep: true\r\n      }\r\n    },\r\n    methods: {\r\n      /**\r\n       * 获取文章分类树, 并在初始化时查询一次第一个分类下的文章\r\n       * @return {[type]} [description]\r\n       */\r\n      initArticleTree() {\r\n        this.pageLoading = true\r\n        let config = {\r\n          method: \"get\",\r\n          url: `${this.common.basePath}/article_type/tree`\r\n        }\r\n        this.axios(config).then((response) => {\r\n          this.treeData   = response.data.data\r\n          this.activeId   = response.data.data[0].id\r\n          this.activeNode = response.data.data[0]\r\n\r\n          if(this.common.checkAuthority('ArticleSetting-listArticle', true)){\r\n            this.getArticleList(response.data.data[0].code)\r\n          }\r\n\r\n          this.pageLoading = false\r\n        }).catch((errorMsg) => {\r\n          this.pageLoading = false\r\n          this.$message.error(errorMsg)\r\n        })\r\n      },\r\n      /**\r\n       * 点击添加分类\r\n       * @param {[type]} parentId [description]\r\n       */\r\n      addTree(data, type) {\r\n        this.insertMode = false\r\n        this.operateType           = \"new\"\r\n        this.dialogTypeVisible     = true\r\n        this.typeForm = {\r\n          name: null,\r\n        }\r\n        data ? this.typeForm.parent_id = data.id : this.typeForm.parent_id = null //传入data 表示添加当前的子集\r\n\r\n        if(type) {\r\n          this.insertMode = true\r\n          this.typeForm.parent_id = data.parent_id\r\n          if(type == \"prev\") {\r\n            this.typeForm.array_number = data.array_number\r\n          } else {\r\n            this.typeForm.array_number = data.array_number + 1\r\n          }\r\n        }\r\n        this.$nextTick(_ => {\r\n          this.$refs.typeForm.clearValidate()\r\n        })\r\n      },\r\n      /**\r\n       * 点击添加分类(在前或在后方添加, 非添加子集)\r\n       * @param  {[type]} data [description]\r\n       * @return {[type]}      [description]\r\n       */\r\n      // addTree(data) {\r\n      //   this.operateType = \"new\"\r\n      //   this.dialogTypeVisible = true\r\n      //   this.typeForm.name     = null\r\n      // },\r\n      /**\r\n       * 点击编辑分类\r\n       * @param {[type]} parentId [description]\r\n       */\r\n      editTree(data) {\r\n        this.operateType = \"edit\"\r\n        this.dialogTypeVisible = true\r\n        this.typeForm = JSON.parse(JSON.stringify(data))\r\n        this.$nextTick(_ => {\r\n          this.$refs.typeForm.clearValidate()\r\n        })\r\n      },\r\n      /**\r\n       * 提交编辑/添加分类\r\n       * @param {[type]} parentId [description]\r\n       */\r\n      addTreeSubmit() {\r\n        \r\n        let url = \"\"\r\n        if(this.insertMode) {\r\n          url = `${this.common.basePath}/article_type/tree/add`\r\n        } else {\r\n          url = `${this.common.basePath}/article_type`\r\n        }\r\n        let config = {\r\n          method: this.operateType == \"new\" ? \"post\" : \"put\",\r\n          url: this.operateType == \"new\" ? url : `${this.common.basePath}/article_type/${this.typeForm.id}` ,\r\n          data: this.typeForm\r\n        }\r\n        // data ? config.parent_id = data.parent_id : null\r\n        this.$refs.typeForm.validate(valid => {\r\n          if(valid) {\r\n            this.pageLoading = true\r\n            this.axios(config).then((response) => {\r\n              this.$message.success(response.data.meta.message)\r\n              this.dialogTypeVisible = false\r\n              this.pageLoading = false\r\n              this.initArticleTree()\r\n            }).catch((errorMsg) => {\r\n              this.dialogTypeVisible = false\r\n              this.pageLoading = false\r\n              this.$message.error(errorMsg)\r\n            })\r\n          }\r\n        })\r\n        \r\n      },\r\n      \r\n      /**\r\n       * 删除分类\r\n       * @param {[type]} parentId [description]\r\n       */\r\n      deleteTree(data) {\r\n        this.typeForm = JSON.parse(JSON.stringify(data))\r\n\r\n        this.$confirm(\"当前删除的内容将无法找回\", \"确认删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        }).then(_ => {\r\n          let config = {\r\n            method: \"patch\",\r\n            url: `${this.common.basePath}/article_type/delete/${this.typeForm.id}` ,\r\n          }\r\n          this.pageLoading = true\r\n          this.axios(config).then((response) => {\r\n            this.$message.success(response.data.meta.message)\r\n            this.dialogTypeVisible = false\r\n            this.pageLoading = false\r\n            this.initArticleTree()\r\n          }).catch((errorMsg) => {\r\n            this.dialogTypeVisible = false\r\n            this.pageLoading = false\r\n            this.$message.error(errorMsg)\r\n          })\r\n        }).catch(_ => {})\r\n      },\r\n      /**\r\n       * 点击某一项分类 查询对应的分类下的文章列表\r\n       * @param  {[type]} data [description]\r\n       * @return {[type]}      [description]\r\n       */\r\n      handleNodeClick(node, data) {\r\n        this.activeId   = node.id\r\n        this.activeCode = node.code\r\n        this.activeNode = node\r\n        if(this.common.checkAuthority('ArticleSetting-listArticle', true)) {\r\n          this.getArticleList(this.activeCode);\r\n        }\r\n      },\r\n      /**\r\n       * 根据分类code获取文章列表\r\n       * @return {[type]} [description]\r\n       */\r\n      getArticleList(code) {\r\n        this.pageLoading = true\r\n        let config = {\r\n          method: \"get\",\r\n          url: `${this.common.basePath}/article`,\r\n          params: {\r\n            type:     this.activeId,\r\n            pageNum:  this.pageNum,\r\n            pageSize: this.pageSize,\r\n          }\r\n        }\r\n        this.axios(config).then((response) => {\r\n          this.tableData = response.data.data\r\n          this.pageLoading = false\r\n        }).catch((errorMsg) => {\r\n          this.pageLoading = false\r\n          this.$message.error(errorMsg)\r\n        })\r\n      },\r\n      /**\r\n       * 点击新增文章, 初始化编辑器\r\n       * @return {[type]} [description]\r\n       */\r\n      showEditDialog(editBoolean) {\r\n        if(!!this.activeNode.parent_id) {\r\n          this.dialogArticleEditVisible   = true\r\n          editBoolean ? this.operateType = \"edit\" : this.operateType = \"new\"\r\n\r\n          this.$nextTick(_ => {\r\n            this.initEditor()\r\n          })\r\n        } else {\r\n          this.$message.error(\"您必须选择二级目录进行文章添加\")\r\n        }\r\n      },\r\n      initEditor () {\r\n        this.editor = new E(this.$refs.editor)\r\n        //配置编辑器\r\n        this.editor.customConfig.debug = true\r\n        this.editor.customConfig.uploadImgServer = `${this.common.basePath}/file/public/upload`\r\n        this.editor.customConfig.showLinkImg = false\r\n        this.editor.customConfig.uploadImgHeaders = this.common.returnConfig()\r\n        this.$refs.editor ? this.editor.create() : null // 仅在首次创建 无须重复创建\r\n        if(this.operateType == \"edit\") {\r\n          this.editor.txt.html(this.editorForm.article_content)\r\n        } else if (this.operateType == \"new\"){\r\n          this.editor.txt.html(\"\")\r\n          this.editorForm.article_name = \"\"\r\n        }\r\n      },\r\n      /**\r\n       * 提交文章, 保存成功后清空编辑器的内容\r\n       * @return {[type]} [description]\r\n       */\r\n      submitArticle() {\r\n        let config = {\r\n          method: this.operateType == \"new\" ? \"post\" : \"patch\",\r\n          url: this.operateType == \"new\" ? `${this.common.basePath}/article/save` : `${this.common.basePath}/article/${this.editorForm.id}`,\r\n          data: {\r\n            article_name:    this.editorForm.article_name,\r\n            article_content: this.editor.txt.html(), //调用编辑器方法读取\r\n            types:           [this.activeId],\r\n            author:          JSON.parse(sessionStorage.getItem(\"Access-Key\"))\r\n          }\r\n        }\r\n        this.pageLoading = true\r\n        this.axios(config).then((response) => {\r\n          this.$message.success(response.data.meta.message)\r\n          this.dialogArticleEditVisible = false\r\n          this.pageLoading = false\r\n          this.getArticleList(this.activeCode)\r\n        }).catch((errorMsg) => {\r\n          this.pageLoading = false\r\n          this.$message.error(errorMsg)\r\n        })\r\n      },\r\n      /**\r\n       * 查看文章详情\r\n       * @param  {object} row 表格中row对象\r\n       * @return {[type]}     [description]\r\n       */\r\n      getArticleDetail(row) {\r\n        let config = {\r\n          method: \"get\",\r\n          url: `${this.common.basePath}/article/${row.id}`,\r\n        }\r\n        this.axios(config).then((response) => {\r\n          this.editorForm = response.data.data\r\n          this.dialogArticleDetailVisible = true\r\n        }).catch((errorMsg) => {\r\n          this.$message.error(errorMsg)\r\n        })\r\n      },\r\n      /**\r\n       * 在查看详情时 变为编辑模式 编辑模式中的form为深拷贝的数据\r\n       * @return {[type]} [description]\r\n       */\r\n      changeToEdit() {\r\n        this.dialogArticleDetailVisible = false\r\n        this.showEditDialog(true)\r\n        let newForm = JSON.parse(JSON.stringify(this.editorForm))\r\n        this.editorForm = newForm\r\n      },\r\n      /**\r\n       * 删除文章\r\n       * @param  {[type]} row [description]\r\n       * @return {[type]}     [description]\r\n       */\r\n      deleteArticle(row) {\r\n        this.$confirm(\"当前删除的内容将无法找回\", \"确认删除?\", {\r\n          confirmButtonText: \"确定\",\r\n          cancelButtonText: \"取消\",\r\n          type: \"warning\"\r\n        }).then(_ => {\r\n          let config = {\r\n            method: \"patch\",\r\n            url: `${this.common.basePath}/article/delete/${row.id}`,\r\n          }\r\n          this.axios(config).then((response) => {\r\n            this.$message.success(response.data.meta.message)\r\n            this.getArticleList(this.activeCode)\r\n          }).catch((errorMsg) => {\r\n            this.$message.error(errorMsg)\r\n          })\r\n        }).catch(error => {})\r\n      },\r\n      pageSizeChange(val) {\r\n        this.pageSize = val\r\n        this.getArticleList(this.activeCode)\r\n      },\r\n      pageCurrentChange(val) {\r\n        this.pageNum = val\r\n        this.getArticleList(this.activeCode)\r\n      },\r\n      //////树拖拽\r\n      // TODO 拖拽后 节点级别改变(次级 > 顶级) 需要对应做出处理\r\n      /**\r\n       * 判断拖拽的目标是否允许落下\r\n       * @param  {Object} draggingNode 正在拖拽的节点\r\n       * @param  {Object} dropNode     正在落下的节点\r\n       * @param  {String} type         放置的类型 'prev'、'inner' 和 'next'\r\n       * @return {[type]}              [description]\r\n       */\r\n      allowDrop(draggingNode, dropNode, type) {\r\n        let self = this\r\n        if(!dropNode.data.parent_id) {//落下的目标为顶级分类\r\n          switch(type) {\r\n            case \"prev\":\r\n              return true;\r\n              break;\r\n            case \"next\":\r\n              return true;\r\n              break;\r\n            case \"inner\":\r\n              if(!!draggingNode.data.childrens && draggingNode.data.childrens.length > 0) { //拖动中的节点带有子节点, 不允许拖拽\r\n                return false\r\n              } else {\r\n                return true\r\n              }\r\n              break;\r\n          }\r\n        } else { //落下的目标为次级分类\r\n          switch(type) {\r\n            case \"prev\":\r\n              if(!!draggingNode.data.childrens && draggingNode.data.childrens.length > 0) { //拖动中的节点带有子节点, 不允许拖拽\r\n                return false\r\n              } else {\r\n                return true\r\n              }\r\n              break;\r\n            case \"next\":\r\n              if(!!draggingNode.data.childrens && draggingNode.data.childrens.length > 0) { //拖动中的节点带有子节点, 不允许拖拽\r\n                return false\r\n              } else {\r\n                return true\r\n              }\r\n              break;\r\n            case \"inner\": //次级目标无法以inner方式落下\r\n              return false\r\n          }\r\n        }\r\n      },\r\n      /**\r\n       * 拖拽结束后 重新查询树 无论拖拽是否成功\r\n       * @param  {[type]} draggingNode [description]\r\n       * @param  {[type]} dropNode     [description]\r\n       * @param  {[type]} dropType     [description]\r\n       * @param  {[type]} ev           [description]\r\n       * @return {[type]}              [description]\r\n       */\r\n      handleDragEnd(draggingNode, dropNode, dropType, ev) {\r\n        let config = {\r\n          method: \"post\",\r\n          url: `${this.common.basePath}/article_type/tree/reset`,\r\n          data: this.treeData\r\n        }\r\n        this.pageLoading = true\r\n        this.axios(config).then((response) => {\r\n          this.initArticleTree()\r\n        }).catch((errorMsg) => {\r\n          this.initArticleTree()\r\n          this.$message.error(errorMsg)\r\n        })\r\n        \r\n      },\r\n    }\r\n  };\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ArticleSetting.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ArticleSetting.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ArticleSetting.vue?vue&type=template&id=181d64b4&\"\nimport script from \"./ArticleSetting.vue?vue&type=script&lang=js&\"\nexport * from \"./ArticleSetting.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\ncomponent.options.__file = \"ArticleSetting.vue\"\nexport default component.exports","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n"],"sourceRoot":""}